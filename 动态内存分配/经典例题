#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<errno.h>
#include<Windows.h>

void GetMemory(char* p)
{
	p = (char*)malloc(100);
}
void Test(void)
{
	char* str = NULL;
	GetMemory(str);
	strcpy(str, "hello world");
	printf(str);
}
int main()
{
	Test();
	return 0;
}
1.运行代码程序会出现崩溃现象
2.程序在内存泄漏的问题
str以值传递的形式给p
p是GetMemory函数的形参，只能在函数内部有效
等GetMemory函数返回之后，动态开辟内存尚未释放
并且无法找到，造成内存泄漏

改正一
void GetMemory(char* *p)
{
	*p = (char*)malloc(100);
}
void Test(void)
{
	char* str = NULL;
	GetMemory(&str);
	strcpy(str, "hello world");
	printf(str);
	free(str);
	str = NULL;
}
int main()
{
	Test();
	return 0;
}

改正二
char GetMemory(char* p)
{
	p = (char*)malloc(100);
	return p;
}
void Test(void)
{
	char* str = NULL;
	str = GetMemory(str);
	strcpy(str, "hello world");
	printf(str);
	free(str);
	str = NULL;
}
int main()
{
	Test();
	return 0;
}




char GetMemory(void)
{
	char p[] = "hello world";
	return p;
}
void Test(void)
{
	char* str = NULL;
	str = GetMemory();
	printf(str);
}
int main()
{
	Test();
	return 0;
}

int* test()
{
	//static int a=10;//静态区
	int a = 10;//栈区
	return &a;
}
int main()
{
	int* p = test();
	*p = 20;
}

int* test()
{
	int* ptr = malloc(100);//栈区
	return ptr;
}
int main()
{
	int* p = test();
}



void Getmenory(char** p, int num)
{
	*p = (char*)malloc(num);
}
void Test(void)
{
	char* str = NULL;
	Getmenory(&str, 100);
	strcpy(str, "hello");
	printf(str);
	//改
	free(str);
	str = NULL;
}
int main()
{
	Test();
	return 0;
}



void Test(void)
{
	char* str = (char*)malloc(100);
	strcpy(str, "hello");
	free(str);//释放str指向的空间后，并不会把str变为NULL
	str = NULL;//改正
	if (str != NULL)
	{
		strcpy(str, "world");//str已经被释放了，非法访问内存
		printf("str");
	}
}
int main()
{
	Test();
	return 0;
}
