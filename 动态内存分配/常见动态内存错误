#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<errno.h>
#include<Windows.h>

int main()
{ 
  1.对NULL进行解引用操作
	int* p = (int*)malloc(40);
	//万一malloc失败了，p就被赋值为NULL
	//要判断
	//*p=0//err
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		*(p + i) = i;//err
	}
	free(p);
	p = NULL;
	return 0;

	//2.对动态开辟的内存的越界访问
	int* p = (int*)malloc(5 * sizeof(int));
	if (p == NULL)
	{
		return 0;
	}
	else
	{
		int i = 0;
		for (i = 0; i < 10; i++)
		{
			*(p + i) = i;
		}
	}
	free(p);
	p = NULL;

	//3.对非动态开辟内存使用free释放
	int a = 10;
	int* p = &a;
	*p = 20;
	//对非动态开辟内存使用free释放
	free(p);
	p = NULL;

	//4.使用free释放动态开辟内存的一部分
	int* p = (int*)malloc(40);
	if (p == NULL)
	{
		return 0;
	}
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		*p++ = i;
	}
	//回收空间
	free(p);
	p = NULL;

	//5.对同一块动态内存多次释放
	int* p = (int*)malloc(40);
	if (p = NULL)
	{
		return 0;
	}
	//使用
	//释放
	free(p);
	p = NULL;//谁释放谁收回
	//。。。
	free(p);

	6.动态开辟内存忘记释放（内存泄漏）
	while (1)
	{
		malloc(1);

	}
}
