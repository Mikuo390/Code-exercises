#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<assert.h>
struct S
{
	char name[20];
	int age;
};
void* my_memcpy(void* dest, const void* src, size_t num)
{
	void* ret = dest;
	assert(dest != NULL);
	assert(src != NULL);
	
	while (num--)
	{
		*(char*)dest = *(char*)src;
		++(char*)dest;
		++(char*)src;
	}
	return ret;
}
//int main()
//{
//	int arr1[] = { 1,2,3,4,5 };
//	int arr2[5] = { 0 };
//	struct S arr3[] = { {"张三",20},{"李四",30} };
//	struct S arr4[3] = { 0 };
//	//memcpy(arr2, arr1, sizeof(arr1));
//	//memcpy(arr3, arr3, sizeof(arr3));
//
//	//my_memcpy(arr2, arr1, sizeof(arr1));
//	my_memcpy(arr4, arr3, sizeof(arr1));
//	return 0;
//}

//c语言标准
//memcpy 只要处理不重叠的内存拷贝
//memmove 处理重叠内存的拷贝

void* my_memmove(void* dest, void* src, size_t num)
{

}
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int i = 0;
	//my_memcpy(arr + 2, arr, 20);
	//memcpy(arr + 2, arr, 20);
	memmove(arr + 2, arr, 20);//处理内存重叠的情况的
	my_memmove(arr + 2, arr, 20);

	for (i = 0; i < 10; i++)
	{
		printf("%d ", arr[i]);
	}
}
